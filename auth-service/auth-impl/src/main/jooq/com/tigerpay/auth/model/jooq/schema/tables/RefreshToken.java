/*
 * This file is generated by jOOQ.
 */
package com.tigerpay.auth.model.jooq.schema.tables;


import com.tigerpay.auth.model.jooq.schema.Keys;
import com.tigerpay.auth.model.jooq.schema.Public;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stores refresh token data
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RefreshToken extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.refresh_token</code>
     */
    public static final RefreshToken REFRESH_TOKEN = new RefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.refresh_token.uuid</code>. Refresh token UUID
     */
    public final TableField<Record, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "Refresh token UUID");

    /**
     * The column <code>public.refresh_token.token</code>. Refresh token itself
     */
    public final TableField<Record, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(255).nullable(false), this, "Refresh token itself");

    /**
     * The column <code>public.refresh_token.expires_at</code>. Refresh token
     * expiration date (timestamp)
     */
    public final TableField<Record, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Refresh token expiration date (timestamp)");

    /**
     * The column <code>public.refresh_token.account_uuid</code>. Account UUID
     * that owns this particular refresh token
     */
    public final TableField<Record, java.util.UUID> ACCOUNT_UUID = createField(DSL.name("account_uuid"), SQLDataType.UUID.nullable(false), this, "Account UUID that owns this particular refresh token");

    private RefreshToken(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RefreshToken(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stores refresh token data"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(String alias) {
        this(DSL.name(alias), REFRESH_TOKEN);
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(Name alias) {
        this(alias, REFRESH_TOKEN);
    }

    /**
     * Create a <code>public.refresh_token</code> table reference
     */
    public RefreshToken() {
        this(DSL.name("refresh_token"), null);
    }

    public <O extends Record> RefreshToken(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REFRESH_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.REFRESH_TOKEN_PK;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.REFRESH_TOKEN__REFRESH_TOKEN_ACCOUNT_FK);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.REFRESH_TOKEN__REFRESH_TOKEN_ACCOUNT_FK);

        return _account;
    }

    @Override
    public RefreshToken as(String alias) {
        return new RefreshToken(DSL.name(alias), this);
    }

    @Override
    public RefreshToken as(Name alias) {
        return new RefreshToken(alias, this);
    }

    @Override
    public RefreshToken as(Table<?> alias) {
        return new RefreshToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(String name) {
        return new RefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Name name) {
        return new RefreshToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Table<?> name) {
        return new RefreshToken(name.getQualifiedName(), null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.tigerpay.auth.model.jooq.schema.tables;


import com.tigerpay.auth.model.jooq.schema.Keys;
import com.tigerpay.auth.model.jooq.schema.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Represents role that account can have
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountRole extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_role</code>
     */
    public static final AccountRole ACCOUNT_ROLE = new AccountRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.account_role.uuid</code>. Role UUID
     */
    public final TableField<Record, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "Role UUID");

    /**
     * The column <code>public.account_role.key</code>. Role key, must be unique
     * and not null
     */
    public final TableField<Record, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(20).nullable(false), this, "Role key, must be unique and not null");

    /**
     * The column <code>public.account_role.label</code>. Role label, must not
     * be null
     */
    public final TableField<Record, String> LABEL = createField(DSL.name("label"), SQLDataType.VARCHAR(255).nullable(false), this, "Role label, must not be null");

    private AccountRole(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private AccountRole(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Represents role that account can have"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_role</code> table reference
     */
    public AccountRole(String alias) {
        this(DSL.name(alias), ACCOUNT_ROLE);
    }

    /**
     * Create an aliased <code>public.account_role</code> table reference
     */
    public AccountRole(Name alias) {
        this(alias, ACCOUNT_ROLE);
    }

    /**
     * Create a <code>public.account_role</code> table reference
     */
    public AccountRole() {
        this(DSL.name("account_role"), null);
    }

    public <O extends Record> AccountRole(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ACCOUNT_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.ACCOUNT_ROLE_PK;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCOUNT_ROLE_KEY_UQ);
    }

    @Override
    public AccountRole as(String alias) {
        return new AccountRole(DSL.name(alias), this);
    }

    @Override
    public AccountRole as(Name alias) {
        return new AccountRole(alias, this);
    }

    @Override
    public AccountRole as(Table<?> alias) {
        return new AccountRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRole rename(String name) {
        return new AccountRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRole rename(Name name) {
        return new AccountRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRole rename(Table<?> name) {
        return new AccountRole(name.getQualifiedName(), null);
    }
}

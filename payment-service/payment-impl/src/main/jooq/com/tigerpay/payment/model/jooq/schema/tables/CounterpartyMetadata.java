/*
 * This file is generated by jOOQ.
 */
package com.tigerpay.payment.model.jooq.schema.tables;


import com.tigerpay.payment.model.jooq.schema.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Represents bank counterparty
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CounterpartyMetadata extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.counterparty_metadata</code>
     */
    public static final CounterpartyMetadata COUNTERPARTY_METADATA = new CounterpartyMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.counterparty_metadata.id</code>. Bank account ID
     * in TigerBeetle
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Bank account ID in TigerBeetle");

    /**
     * The column <code>public.counterparty_metadata.ledger</code>. Bank ledger
     */
    public final TableField<Record, Integer> LEDGER = createField(DSL.name("ledger"), SQLDataType.INTEGER.nullable(false), this, "Bank ledger");

    private CounterpartyMetadata(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CounterpartyMetadata(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Represents bank counterparty"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.counterparty_metadata</code> table
     * reference
     */
    public CounterpartyMetadata(String alias) {
        this(DSL.name(alias), COUNTERPARTY_METADATA);
    }

    /**
     * Create an aliased <code>public.counterparty_metadata</code> table
     * reference
     */
    public CounterpartyMetadata(Name alias) {
        this(alias, COUNTERPARTY_METADATA);
    }

    /**
     * Create a <code>public.counterparty_metadata</code> table reference
     */
    public CounterpartyMetadata() {
        this(DSL.name("counterparty_metadata"), null);
    }

    public <O extends Record> CounterpartyMetadata(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, COUNTERPARTY_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public CounterpartyMetadata as(String alias) {
        return new CounterpartyMetadata(DSL.name(alias), this);
    }

    @Override
    public CounterpartyMetadata as(Name alias) {
        return new CounterpartyMetadata(alias, this);
    }

    @Override
    public CounterpartyMetadata as(Table<?> alias) {
        return new CounterpartyMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CounterpartyMetadata rename(String name) {
        return new CounterpartyMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CounterpartyMetadata rename(Name name) {
        return new CounterpartyMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CounterpartyMetadata rename(Table<?> name) {
        return new CounterpartyMetadata(name.getQualifiedName(), null);
    }
}

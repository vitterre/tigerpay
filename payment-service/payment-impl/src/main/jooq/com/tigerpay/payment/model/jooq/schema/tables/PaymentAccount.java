/*
 * This file is generated by jOOQ.
 */
package com.tigerpay.payment.model.jooq.schema.tables;


import com.tigerpay.payment.model.jooq.schema.Keys;
import com.tigerpay.payment.model.jooq.schema.Public;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Represents the payment account
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PaymentAccount extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_account</code>
     */
    public static final PaymentAccount PAYMENT_ACCOUNT = new PaymentAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.payment_account.id</code>. Represents ID of
     * account that is being stored in TigerBeetle
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Represents ID of account that is being stored in TigerBeetle");

    /**
     * The column <code>public.payment_account.code</code>. Represents the
     * category of payment account
     */
    public final TableField<Record, Integer> CODE = createField(DSL.name("code"), SQLDataType.INTEGER.nullable(false), this, "Represents the category of payment account");

    /**
     * The column <code>public.payment_account.ledger</code>. Partition that
     * this particular payment account belongs to and represents currency group
     */
    public final TableField<Record, Integer> LEDGER = createField(DSL.name("ledger"), SQLDataType.INTEGER.nullable(false), this, "Partition that this particular payment account belongs to and represents currency group");

    /**
     * The column <code>public.payment_account.phone_number</code>. Phone
     * number; used to directly transfer money by phone number
     */
    public final TableField<Record, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(20).nullable(false), this, "Phone number; used to directly transfer money by phone number");

    /**
     * The column <code>public.payment_account.profile_uuid</code>. User profile
     * UUID that owns this and probably other accounts
     */
    public final TableField<Record, UUID> PROFILE_UUID = createField(DSL.name("profile_uuid"), SQLDataType.UUID.nullable(false), this, "User profile UUID that owns this and probably other accounts");

    private PaymentAccount(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PaymentAccount(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Represents the payment account"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment_account</code> table reference
     */
    public PaymentAccount(String alias) {
        this(DSL.name(alias), PAYMENT_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.payment_account</code> table reference
     */
    public PaymentAccount(Name alias) {
        this(alias, PAYMENT_ACCOUNT);
    }

    /**
     * Create a <code>public.payment_account</code> table reference
     */
    public PaymentAccount() {
        this(DSL.name("payment_account"), null);
    }

    public <O extends Record> PaymentAccount(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PAYMENT_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PAYMENT_ACCOUNT_PK;
    }

    @Override
    public PaymentAccount as(String alias) {
        return new PaymentAccount(DSL.name(alias), this);
    }

    @Override
    public PaymentAccount as(Name alias) {
        return new PaymentAccount(alias, this);
    }

    @Override
    public PaymentAccount as(Table<?> alias) {
        return new PaymentAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentAccount rename(String name) {
        return new PaymentAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentAccount rename(Name name) {
        return new PaymentAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentAccount rename(Table<?> name) {
        return new PaymentAccount(name.getQualifiedName(), null);
    }
}
